distill::create_post("The Sharpe Ratio")
knitr::opts_chunk$set(echo = TRUE)
# packages required for this post
for (pkg in c('PerformanceAnalytics', 'quantmod', 'dygraphs', 'RColorBrewer')) {
if (!requireNamespace(pkg, quietly = TRUE)) install.packages(pkg)
}
set.seed(42)
# Choose the starting year and assign it to the 'year' variable
year <- 2020
# Use the function the monthly returns on 3 stocks, and pass in the 'year'
# value. Let's choose Google, JP Morgan and Amazon
monthly_stock_returns('GOOG', year)
# Function to calculate monthly returns on a stock
monthly_stock_returns <- function(ticker, start_year) {
# Download the data from Yahoo finance
symbol <- getSymbols(ticker, src = 'yahoo',
auto.assign = FALSE, warnings = FALSE)
# Tranform it to monthly returns using quantmode::periodReturn
data <- periodReturn(symbol, period = 'monthly',
subset=paste(start_year, "::", sep = ""),
type = 'log')
# Let's rename the column of returns to something intuitive because
# the column name is what will eventually be displayed
colnames(data) <- as.character(ticker)
# We want to be able to work with the xts objects so let's explicitly
# assign them into the global environment using ticker name
assign(ticker, data, .GlobalEnv)
}
# Choose the starting year and assign it to the 'year' variable
year <- 2020
# Use the function the monthly returns on 3 stocks, and pass in the 'year'
# value. Let's choose Google, JP Morgan and Amazon
monthly_stock_returns('GOOG', year)
# Download the data from Yahoo finance
symbol <- getSymbols(ticker, src = 'yahoo',
auto.assign = FALSE, warnings = FALSE)
library(PerformanceAnalytics)
library(quantmod)
library(dygraphs)
symbol <- getSymbols(ticker, src = 'yahoo',
+                        auto.assign = FALSE, warnings = FALSE)
getSymbols(ticker,src = "yahoo")
# Function to calculate monthly returns on a stock
monthly_stock_returns <- function(ticker, start_year) {
# Download the data from Yahoo finance
symbol <- getSymbols(ticker, src = 'yahoo',
auto.assign = FALSE, warnings = FALSE)
# Tranform it to monthly returns using quantmode::periodReturn
data <- periodReturn(symbol, period = 'monthly',
subset=paste(start_year, "::", sep = ""),
type = 'log')
# Let's rename the column of returns to something intuitive because
# the column name is what will eventually be displayed
colnames(data) <- as.character(ticker)
# We want to be able to work with the xts objects so let's explicitly
# assign them into the global environment using ticker name
assign(ticker, data, .GlobalEnv)
}
# Choose the starting year and assign it to the 'year' variable
year <- 2015
# Use the function the monthly returns on 3 stocks, and pass in the 'year'
# value. Let's choose Google, JP Morgan and Amazon
monthly_stock_returns('GOOG', year)
monthly_stock_returns('JPM', year)
monthly_stock_returns('AMZN', year)
# Merge the 3 monthly return xts objects into 1 xts object.
merged_returns <- merge.xts(GOOG, JPM, AMZN)
head(merged_returns)
# Before we combine these into a portfolio, graph the individual returns
# and see if anything jumps out as unusual. It looks like something
# affected Google in March of 2014, but didn't affect JP Morgan or Amazon.
dygraph(merged_returns, main = "Google v JP Morgan v Amazon") %>%
dyAxis("y", label = "%") %>%
dyOptions(colors = RColorBrewer::brewer.pal(3, "Set2"))
# We have the 3 monthly returns saved in 1 object.
# Now, let's choose the respective weights of those 3.
# Here we'll allocate 25% to Google, 25% to JP Morgan and 50% to Amazon.
w <- c(.25, .25, .50)
# Now use the built in PerformanceAnalytics function Return.portfolio
# to calculate the monthly returns on the portfolio,
portfolio_monthly_returns <- Return.portfolio(merged_returns, weights = w)
# Use dygraphs to chart the portfolio monthly returns.
dygraph(portfolio_monthly_returns, main = "Portfolio Monthly Return") %>%
dyAxis("y", label = "%")
# Add the wealth.index = TRUE argument and, instead of monthly returns,
# the function will return the growth of $1 invested in the portfolio.
dollar_growth <- Return.portfolio(merged_returns, weights = w,
wealth.index = TRUE)
# Use dygraphs to chart the growth of $1 in the portfolio.
dygraph(dollar_growth, main = "Growth of $1 Invested in Portfolio") %>%
dyAxis("y", label = "$")
# Method 1: use the Return.excess function from PerformanceAnalytics,
# then calculate the Sharpe Ratio manually.
portfolio_excess_returns <- Return.excess(portfolio_monthly_returns,
Rf = .0003)
sharpe_ratio_manual <- round(
mean(portfolio_excess_returns) / StdDev(portfolio_excess_returns), 4
)
# If we wanted to use the original, 1966 formulation of the Sharpe Ratio,
# there is one small change to the code in Method 1
sharpe_ratio <- round(
SharpeRatio(portfolio_monthly_returns, Rf = .0003), 4
)
sharpe_ratio
# Tranform it to monthly returns using quantmode::periodReturn
data <- periodReturn(symbol, period = 'monthly',
subset=paste(start_year, "::", sep = ""),
type = 'log')
View(AMZN)
sharpe_ratio[1,]
sharpe_ratio_manual[1,]
sharpe_ratio[1,]
Sys.Date()
knit_with_parameters('~/Desktop/BLOG/my_blog/_posts/2021-10-14-the-sharpe-ratio/the-shape-ratio.Rmd')
library("knitr")
knit2html("the-shape-ratio")
knit2html("the-shape-ratio.rmd")
getwd()
knit2html("/Users/Murera Gisa/Desktop/BLOG/my_blog/2021-10-14-the-shape-ratio/the-shape-ratio.rmd")
packageVersion("distill")
packageVersion("rmarkdown")
create_theme(name = "theme")
distill::create_theme()
q()
distill::create_post(title = "Game of Throne")
install.packages(c("extrafont", "gganimate", "here"))
library(extrafont)
library(extrafont)
library(extrafont)
loadfonts(device = "win") # yeah, win! :/
font <- "Game of Thrones"
font2 <- "Roboto Condensed"
bckground <- "black"
color1 <- "#959394"
color2 <- "white"
seed <- 123
theme_set(theme_gray())
library(extrafont)
loadfonts(device = "win") # yeah, win! :/
loadfonts(device = "win") # yeah, win! :/
font_paths()
font_import()
font_import()
loadfonts(device = "win") # yeah, win! :/
font_import()
font_families()
loadfonts(device = "wac") # yeah, win! :/
loadfonts(device = "mac") # yeah, win! :/
library(extrafont)
loadfonts() # yeah, win! :/
font <- "Game of Thrones"
font2 <- "Roboto Condensed"
theme_set(theme_gray())
ggplot2::theme_set(theme_gray())
ggplot2::theme_set(theme_bw())
theme_get()
ggthemes::theme_set(theme_bw())
p
animate(p, fps = 30, duration = 8*3, width = 1000, height = 800)
animate(p, fps = 30, duration = 8*3, width = 1000, height = 800)
library(gganimate)
library(gifski)
library(av)
install.packages(c("av", "gifski"))
p
cols = c(coords)
p <- ggplot() +
# maint characters labels
ggrepel::geom_text_repel(
# geom_text(
aes(x, y, label = name),
seed = seed,
# box.padding = .5, force = 0.25,, max.iter = 5000,
color = color1,
size = 3,
family = font2,
vjust = "inward", hjust = "inward",
data = semi_join(characters, main_characters, by = "name")
) +
# https://stackoverflow.com/a/34398935/829971
# maint characters points
geom_point(
aes(x, y),
size = 3,
alpha = 0.50,
color = color2,
stroke = 0,
shape = 16,
data = semi_join(characters, main_characters, by = "name")
) +
# rest of points
geom_point(
aes(x, y),
size = 3,
alpha = 0.20,
color = color2,
stroke = 0,
shape = 16,
data = anti_join(characters, main_characters, by = "name")
) +
# labels affiliations
geom_text(
aes(x, y + 3 / nrow(affiliations), label = affiliation, size = degree),
data = affiliations,
color = color1,
alpha = 0.80,
family = font
) +
scale_size(range = c(2, 5)) +
labs(
title = "#",
caption = "#DataBrain",
x = NULL,
y = NULL
) +
theme(
legend.position = "none",
panel.border = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
rect = element_rect(fill = bckground, color = bckground),
text  = element_text(family = font, colour = color1, size = 15),
plot.title = element_text(family = font, colour = color1, size = 25),
plot.subtitle = element_text(family = font2, colour = color1, size = 13),
plot.caption = element_text(family = font2, colour = color1, size = 10),
)
head(data_long)
p <- ggplot() +
geom_point(aes(x, y, color = affiliation), alpha = 0.5, data = characters) +
geom_text(aes(x, y, size = n, label = affiliation), alpha = 0.5, data = affiliations) +
scale_size_area() +
scale_color_viridis_d() +
theme(legend.position = "none")
p
distill:: create_footer()
distill::create_footer()
create_footer()
q()
traceback()
remotes::install_github("rstudio/distill#379")
library(xml2)
q()
q()
q()
library(coronavirus)
update_dataset()
data(coronavirus)
dim(coronavirus)
summary(coronavirus)
q()
install.packages("distilltools")
remotes::install_github("EllaKaye/distilltools")
distill::distill_article("Unesco-Mab-Programme")
distill::create_post("Unesco-Mab-Pgm", draft = TRUE)
rename_post_dir("_posts/2022-02-21-unesco-mab-pgm")
distill::rename_post_dir("_posts/2022-02-21-unesco-mab-pgm")
distill::create_post("Unesco-Mab-Programme", draft = TRUE)
knit_with_parameters('~/Desktop/BLOG/my_blog/_posts/2022-02-21-unesco-mab-programme/unesco-mab-programme.Rmd')
distill::distill_article("Unesco-Mab-Programme")
distill::distill_article("Unesco-Mab-Programme")
distill::distill_article("Unesco-Mab-Programme")
distill::create_post("Unesco-Mab-Pgm", draft = TRUE)
distill::create_article("publication")
getwd()
distill::create_blog(dir = "/Users/Murera Gisa/Desktop/BLOG/my_blog/_talks/","publications")
create_post("sentiments-banks", collection = "talks")
distill::create_post("sentiments-banks", collection = "talks")
q()
